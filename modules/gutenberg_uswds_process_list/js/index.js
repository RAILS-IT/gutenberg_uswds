/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var _wp = wp,
  blocks = _wp.blocks,
  data = _wp.data,
  element = _wp.element,
  components = _wp.components,
  editor = _wp.editor,
  blockEditor = _wp.blockEditor;
var registerBlockType = blocks.registerBlockType;
var dispatch = data.dispatch,
  select = data.select,
  useSelect = data.useSelect;
var Fragment = element.Fragment;
var SelectControl = components.SelectControl,
  ColorPalette = components.ColorPalette,
  PanelBody = components.PanelBody;
var RichText = blockEditor.RichText,
  InnerBlocks = blockEditor.InnerBlocks,
  InspectorControls = blockEditor.InspectorControls;
var __ = Drupal.t;
var processList = {
  title: __('Process List'),
  description: __('A single process list'),
  icon: 'list-view',
  attributes: {
    title: {
      type: 'string'
    },
    layout: {
      type: 'string',
      default: 'numerical'
    },
    borderColor: {
      type: 'string',
      default: 'black'
    }
  },
  edit: function edit(_ref) {
    var attributes = _ref.attributes,
      setAttributes = _ref.setAttributes;
    var title = attributes.title,
      layout = attributes.layout,
      borderColor = attributes.borderColor;
    var borderColors = [{
      name: 'black',
      color: 'black'
    }, {
      name: 'red',
      color: 'red'
    }, {
      name: 'orange',
      color: 'orange'
    }, {
      name: 'yellow',
      color: 'yellow'
    }, {
      name: 'green',
      color: 'green'
    }, {
      name: 'blue',
      color: 'blue'
    }];
    return React.createElement(Fragment, null, React.createElement(RichText, {
      tagName: "h3",
      className: "site-preview-heading usa-process-list__title",
      value: title,
      onChange: function onChange(title) {
        return setAttributes({
          title: title
        });
      },
      placeholder: __('Process List title...'),
      keepPlaceholderOnFocus: true,
      withoutInteractiveFormatting: true,
      allowedFormats: []
    }), React.createElement("ul", {
      className: "usa-process-list usa-process-list--".concat(layout, " usa-process-list--").concat(borderColor)
    }, React.createElement(InnerBlocks, {
      allowedBlocks: ['uswds/list-item']
    })), React.createElement(InspectorControls, null, React.createElement(PanelBody, {
      title: __('List Type')
    }, React.createElement(SelectControl, {
      value: layout,
      options: [{
        label: 'Alphabetical',
        value: 'alphabetical'
      }, {
        label: 'Numerical',
        value: 'numerical'
      }],
      onChange: function onChange(layout) {
        setAttributes({
          layout: layout
        });
      }
    })), React.createElement(PanelBody, {
      title: __('List Color')
    }, React.createElement(ColorPalette, {
      colors: borderColors,
      value: borderColor,
      disableCustomColors: true,
      onChange: function onChange(color) {
        setAttributes({
          borderColor: color
        });
      }
    }))));
  },
  save: function save(_ref2) {
    var attributes = _ref2.attributes;
    var title = attributes.title,
      layout = attributes.layout,
      borderColor = attributes.borderColor;
    return React.createElement(InnerBlocks.Content, null);
  }
};
var processListItem = {
  title: __('Process List Item'),
  description: __('A single Process List Item'),
  icon: 'list-view',
  attributes: {
    heading: {
      type: 'string',
      default: ''
    }
  },
  edit: function edit(_ref3) {
    var attributes = _ref3.attributes,
      setAttributes = _ref3.setAttributes;
    var heading = attributes.heading;
    return React.createElement(Fragment, null, React.createElement("li", {
      className: "usa-process-list__item"
    }, React.createElement(RichText, {
      tagName: "h4",
      className: "usa-process-list__heading",
      value: heading,
      onChange: function onChange(heading) {
        return setAttributes({
          heading: heading
        });
      },
      placeholder: __('Insert heading...'),
      keepPlaceholderOnFocus: true
    }), React.createElement(InnerBlocks, {
      allowedBlocks: ['core/paragraph', 'core/list', 'core/image']
    })));
  },
  save: function save(_ref4) {
    var attributes = _ref4.attributes;
    var heading = attributes.heading;
    return React.createElement(InnerBlocks.Content, null);
  }
};
var category = {
  slug: 'uswds',
  title: __('USWDS')
};
var currentCategories = select('core/blocks').getCategories().filter(function (item) {
  return item.slug !== category.slug;
});
dispatch('core/blocks').setCategories([category].concat(_toConsumableArray(currentCategories)));
registerBlockType("".concat(category.slug, "/process-list-item"), _objectSpread({
  category: category.slug,
  parent: ['uswds/process-list']
}, processListItem));
registerBlockType("".concat(category.slug, "/process-list"), _objectSpread({
  category: category.slug
}, processList));