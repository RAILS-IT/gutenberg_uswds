/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var _wp = wp,
  blocks = _wp.blocks,
  data = _wp.data,
  element = _wp.element,
  components = _wp.components,
  editor = _wp.editor,
  blockEditor = _wp.blockEditor;
var registerBlockType = blocks.registerBlockType;
var dispatch = data.dispatch,
  select = data.select,
  useSelect = data.useSelect;
var Fragment = element.Fragment;
var Toolbar = components.Toolbar,
  ColorPalette = components.ColorPalette,
  PanelBody = components.PanelBody;
var RichText = blockEditor.RichText,
  InnerBlocks = blockEditor.InnerBlocks,
  InspectorControls = blockEditor.InspectorControls;
var __ = Drupal.t;
var settings = {
  title: __('Summary Box'),
  description: __('Summarize dense content'),
  icon: 'format-aside',
  attributes: {
    title: {
      type: 'string',
      default: 'Summary'
    },
    backgroundColor: {
      type: 'string',
      default: '#e7f6f8'
    },
    borderColor: {
      type: 'string',
      default: '#99deea'
    }
  },
  edit: function edit(_ref) {
    var attributes = _ref.attributes,
      className = _ref.className,
      setAttributes = _ref.setAttributes,
      isSelected = _ref.isSelected,
      clientId = _ref.clientId;
    var title = attributes.title,
      backgroundColor = attributes.backgroundColor,
      borderColor = attributes.borderColor;
    var divStyle = {
      backgroundColor: backgroundColor,
      borderColor: borderColor
    };
    var backgroundColors = [{
      name: 'white',
      color: '#fff'
    }, {
      name: 'red',
      color: '#f9eeee'
    }, {
      name: 'orange',
      color: '#f6efe9'
    }, {
      name: 'yellow',
      color: '#faf3d1'
    }, {
      name: 'green',
      color: '#eaf4dd'
    }, {
      name: 'blue',
      color: '#e7f6f8'
    }];
    var borderColors = [{
      name: 'white',
      color: '#fff'
    }, {
      name: 'red',
      color: '#f7bbb1'
    }, {
      name: 'orange',
      color: '#f3bf90'
    }, {
      name: 'yellow',
      color: '#e6c74c'
    }, {
      name: 'green',
      color: '#b8d293'
    }, {
      name: 'blue',
      color: '#99deea'
    }];
    return React.createElement(Fragment, null, React.createElement("div", {
      className: "".concat(className, " usa-summary-box"),
      role: "region",
      "aria-labelledby": "summary-box-key-information",
      style: divStyle
    }, React.createElement("div", {
      class: "usa-usa-summary-box__body"
    }, React.createElement(RichText, {
      tagName: "h3",
      className: "usa-summary-box__heading",
      value: title,
      onChange: function onChange(title) {
        return setAttributes({
          title: title
        });
      },
      placeholder: __('Summary'),
      keepPlaceholderOnFocus: true,
      withoutInteractiveFormatting: true,
      allowedFormats: []
    }), React.createElement("div", {
      className: "usa-summary-box__text"
    }, React.createElement(InnerBlocks, {
      allowedBlocks: ['core/paragraph', 'core/list', 'core/image']
    })))), React.createElement(InspectorControls, null, React.createElement(PanelBody, {
      title: __('Background Color')
    }, React.createElement(ColorPalette, {
      colors: backgroundColors,
      value: backgroundColor,
      disableCustomColors: true,
      onChange: function onChange(color) {
        setAttributes({
          backgroundColor: color
        });
      }
    })), React.createElement(PanelBody, {
      title: __('Border Color')
    }, React.createElement(ColorPalette, {
      colors: borderColors,
      value: borderColor,
      disableCustomColors: true,
      onChange: function onChange(color) {
        setAttributes({
          borderColor: color
        });
      }
    }))));
  },
  save: function save(_ref2) {
    var className = _ref2.className,
      attributes = _ref2.attributes;
    return React.createElement(InnerBlocks.Content, null);
  }
};
var category = {
  slug: 'uswds',
  title: __('USWDS')
};
var currentCategories = select('core/blocks').getCategories().filter(function (item) {
  return item.slug !== category.slug;
});
dispatch('core/blocks').setCategories([category].concat(_toConsumableArray(currentCategories)));
registerBlockType("".concat(category.slug, "/summary-box"), _objectSpread({
  category: category.slug
}, settings));