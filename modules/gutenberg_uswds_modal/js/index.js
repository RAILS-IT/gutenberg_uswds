/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _wp = wp,
    blocks = _wp.blocks,
    data = _wp.data,
    element = _wp.element,
    components = _wp.components,
    editor = _wp.editor,
    blockEditor = _wp.blockEditor;
var registerBlockType = blocks.registerBlockType;
var dispatch = data.dispatch,
    select = data.select,
    useSelect = data.useSelect;
var Fragment = element.Fragment;
var ToggleControl = components.ToggleControl,
    PanelBody = components.PanelBody;
var RichText = blockEditor.RichText,
    BlockControls = blockEditor.BlockControls,
    InspectorControls = blockEditor.InspectorControls,
    InnerBlocks = blockEditor.InnerBlocks;
var __ = Drupal.t;
var settings = {
  title: __('Modal'),
  description: __('A button that opens a modal.'),
  icon: 'align-wide',
  attributes: {
    large: {
      type: 'boolean',
      default: false
    },
    title: {
      type: 'string',
      default: ''
    },
    button: {
      type: 'string',
      default: ''
    },
    buttonUnstyled: {
      type: 'boolean',
      default: false
    }
  },
  edit: function edit(_ref) {
    var attributes = _ref.attributes,
        className = _ref.className,
        setAttributes = _ref.setAttributes,
        isSelected = _ref.isSelected,
        clientId = _ref.clientId;
    var title = attributes.title,
        buttonUnstyled = attributes.buttonUnstyled,
        button = attributes.button,
        large = attributes.large;
    var isParentOfSelectedBlock = useSelect(function (select) {
      return select('core/block-editor').hasSelectedInnerBlock(clientId, true);
    });
    var isSelectedOrChild = isSelected || isParentOfSelectedBlock;
    var MODAL_CONTENT_TEMPLATE = [['core/paragraph'], ['core/buttons']];
    var NOT_ALLOWED_BLOCKS = ['uswds/modal', 'uswds/accordion-item'];
    var ALLOWED_BLOCKS = wp.blocks.getBlockTypes().map(function (block) {
      return block.name;
    }).filter(function (blockName) {
      return NOT_ALLOWED_BLOCKS.indexOf(blockName) === -1;
    });
    return React.createElement(Fragment, null, React.createElement("div", {
      className: className
    }, React.createElement("div", null, React.createElement(RichText, {
      tagName: "div",
      className: buttonUnstyled ? 'usa-link' : 'usa-button',
      value: button,
      onChange: function onChange(button) {
        return setAttributes({
          button: button
        });
      },
      placeholder: __('Opener button text'),
      keepPlaceholderOnFocus: true,
      withoutInteractiveFormatting: true,
      allowedFormats: []
    })), isSelectedOrChild && React.createElement("div", {
      className: "usa-modal" + (large ? 'usa-modal--lg' : '')
    }, React.createElement("div", {
      className: "usa-modal__content"
    }, React.createElement("div", {
      className: "usa-modal__main"
    }, React.createElement(RichText, {
      tagName: "h2",
      className: "modal__heading",
      value: title,
      onChange: function onChange(title) {
        return setAttributes({
          title: title
        });
      },
      placeholder: __('Modal title'),
      keepPlaceholderOnFocus: true,
      withoutInteractiveFormatting: true,
      allowedFormats: []
    }), React.createElement("div", {
      class: "usa-prose"
    }, React.createElement(InnerBlocks, {
      template: MODAL_CONTENT_TEMPLATE,
      allowedBlocks: ALLOWED_BLOCKS
    })))))), React.createElement(InspectorControls, null, React.createElement(PanelBody, {
      title: __('Settings')
    }, React.createElement(ToggleControl, {
      label: __('Modal window size'),
      help: large ? __('Large') : __('Default'),
      checked: large,
      onChange: function onChange() {
        if (large) {
          setAttributes({
            controlButton: false
          });
        }

        setAttributes({
          large: !large
        });
      }
    }), React.createElement(ToggleControl, {
      label: __('Show opener as link'),
      help: buttonUnstyled ? __('Showing as Link') : __('Showing as Button'),
      checked: buttonUnstyled,
      onChange: function onChange() {
        if (buttonUnstyled) {
          setAttributes({
            controlButton: false
          });
        }

        setAttributes({
          buttonUnstyled: !buttonUnstyled
        });
      }
    }))));
  },
  save: function save(_ref2) {
    var className = _ref2.className,
        attributes = _ref2.attributes;
    return React.createElement(InnerBlocks.Content, null);
  }
};
var category = {
  slug: 'uswds',
  title: __('USWDS')
};
var currentCategories = select('core/blocks').getCategories().filter(function (item) {
  return item.slug !== category.slug;
});
dispatch('core/blocks').setCategories([category].concat(_toConsumableArray(currentCategories)));
registerBlockType("".concat(category.slug, "/modal"), _objectSpread({
  category: category.slug
}, settings));